package com.chaolemen.shoppingclm.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.chaolemen.shoppingclm.category.bean.DBBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DBBEAN".
*/
public class DBBeanDao extends AbstractDao<DBBean, Long> {

    public static final String TABLENAME = "DBBEAN";

    /**
     * Properties of entity DBBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property GoodsId = new Property(1, int.class, "goodsId", false, "GOODS_ID");
        public final static Property GoodsSkuTitle = new Property(2, String.class, "goodsSkuTitle", false, "GOODS_SKU_TITLE");
        public final static Property GoodsSkuContent = new Property(3, String.class, "goodsSkuContent", false, "GOODS_SKU_CONTENT");
        public final static Property SkuTitle = new Property(4, String.class, "skuTitle", false, "SKU_TITLE");
    }


    public DBBeanDao(DaoConfig config) {
        super(config);
    }
    
    public DBBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DBBEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"GOODS_ID\" INTEGER NOT NULL ," + // 1: goodsId
                "\"GOODS_SKU_TITLE\" TEXT," + // 2: goodsSkuTitle
                "\"GOODS_SKU_CONTENT\" TEXT," + // 3: goodsSkuContent
                "\"SKU_TITLE\" TEXT);"); // 4: skuTitle
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DBBEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DBBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getGoodsId());
 
        String goodsSkuTitle = entity.getGoodsSkuTitle();
        if (goodsSkuTitle != null) {
            stmt.bindString(3, goodsSkuTitle);
        }
 
        String goodsSkuContent = entity.getGoodsSkuContent();
        if (goodsSkuContent != null) {
            stmt.bindString(4, goodsSkuContent);
        }
 
        String skuTitle = entity.getSkuTitle();
        if (skuTitle != null) {
            stmt.bindString(5, skuTitle);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DBBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getGoodsId());
 
        String goodsSkuTitle = entity.getGoodsSkuTitle();
        if (goodsSkuTitle != null) {
            stmt.bindString(3, goodsSkuTitle);
        }
 
        String goodsSkuContent = entity.getGoodsSkuContent();
        if (goodsSkuContent != null) {
            stmt.bindString(4, goodsSkuContent);
        }
 
        String skuTitle = entity.getSkuTitle();
        if (skuTitle != null) {
            stmt.bindString(5, skuTitle);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public DBBean readEntity(Cursor cursor, int offset) {
        DBBean entity = new DBBean( //
            cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // goodsId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // goodsSkuTitle
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // goodsSkuContent
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // skuTitle
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DBBean entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setGoodsId(cursor.getInt(offset + 1));
        entity.setGoodsSkuTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setGoodsSkuContent(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSkuTitle(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DBBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DBBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DBBean entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
